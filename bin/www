#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('../utils/debug')
const http = require('http')
const { redisCluster } = require('../lib/redis_cluster')
global.debug = debug
/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '8088')

async function setupRedisCluster() {
  await redisCluster.connect()
  console.log('Redis cluster is connected')
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Create HTTP server.
 */

async function main() {
  await setupRedisCluster()
  const server = http.createServer(app.callback())
  /**
 * Listen on provided port, on all network interfaces.
 */
  console.log('port', port)
  server.listen(port)
  server.on('error', onError)
  server.on('listening', onListening)

  /**
 * Event listener for HTTP server "error" event.
 */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error
    }

    const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
    }
  }

  /**
 * Event listener for HTTP server "listening" event.
 */

  function onListening() {
    const addr = server.address()
    const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port
    debug('Listening on ' + bind)
  }
}

main()